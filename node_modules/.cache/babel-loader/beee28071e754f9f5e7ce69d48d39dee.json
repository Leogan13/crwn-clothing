{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Leogan\\\\Desktop\\\\Software developer\\\\REACT\\\\crwn-clothing\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyB7fZRW_XAKbvzSHeWmP0htx1Ej7Vfn6bQ\",\n  authDomain: \"crwn-db-9f334.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-9f334.firebaseio.com\",\n  projectId: \"crwn-db-9f334\",\n  storageBucket: \"\",\n  messagingSenderId: \"494230776687\",\n  appId: \"1:494230776687:web:e599f59b7232e822\"\n};\nfirebase.initializeApp(config);\nexport const firestoreTest = () => {\n  const docRef = firestore.collection('users').doc('1PDJlk2jCVgvHRv2rGoxZX19Mz53');\n  docRef.get().then(function (doc) {\n    return console.log(doc.data());\n  });\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(\"users/\".concat(userAuth.uid));\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const displayName = userAuth.displayName,\n          email = userAuth.email;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set(_objectSpread({\n        displayName,\n        email,\n        createdAt\n      }, additionalData));\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:\\Users\\Leogan\\Desktop\\Software developer\\REACT\\crwn-clothing\\src\\components\\firebase\\firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","firestoreTest","docRef","firestore","collection","doc","get","then","console","log","data","createUserProfileDocument","userAuth","additionalData","userRef","uid","snapShot","exists","displayName","email","createdAt","Date","set","error","message","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAC;AACLC,EAAAA,MAAM,EAAE,yCADH;AAELC,EAAAA,UAAU,EAAE,+BAFP;AAGLC,EAAAA,WAAW,EAAE,sCAHR;AAILC,EAAAA,SAAS,EAAE,eAJN;AAKLC,EAAAA,aAAa,EAAE,EALV;AAMLC,EAAAA,iBAAiB,EAAE,cANd;AAOLC,EAAAA,KAAK,EAAE;AAPF,CAAb;AAUAR,QAAQ,CAACS,aAAT,CAAuBR,MAAvB;AAGA,OAAO,MAAMS,aAAa,GAAG,MAAK;AAC9B,QAAMC,MAAM,GAAGC,SAAS,CAACC,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,CAAkC,8BAAlC,CAAf;AAEEH,EAAAA,MAAM,CAACI,GAAP,GAAaC,IAAb,CAAkB,UAASF,GAAT,EAAa;AACzB,WAAOG,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACK,IAAJ,EAAZ,CAAP;AACL,GAFD;AAIL,CAPM;AASP,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AACrE,MAAI,CAACD,QAAL,EAAe;AAEf,QAAME,OAAO,GAAGX,SAAS,CAACE,GAAV,iBAAuBO,QAAQ,CAACG,GAAhC,EAAhB;AAEA,QAAMC,QAAQ,GAAG,MAAMF,OAAO,CAACR,GAAR,EAAvB;;AAEA,MAAI,CAACU,QAAQ,CAACC,MAAd,EAAsB;AAAA,UACZC,WADY,GACWN,QADX,CACZM,WADY;AAAA,UACCC,KADD,GACWP,QADX,CACCO,KADD;AAEpB,UAAMC,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAI;AACF,YAAMP,OAAO,CAACQ,GAAR;AACJJ,QAAAA,WADI;AAEJC,QAAAA,KAFI;AAGJC,QAAAA;AAHI,SAIDP,cAJC,EAAN;AAMD,KAPD,CAOE,OAAOU,KAAP,EAAc;AACdf,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCc,KAAK,CAACC,OAAzC;AACD;AACF;;AAED,SAAOV,OAAP;AACN,CAvBK;AAyBP,OAAO,MAAMW,IAAI,GAAGlC,QAAQ,CAACkC,IAAT,EAAb;AACP,OAAO,MAAMtB,SAAS,GAAGZ,QAAQ,CAACY,SAAT,EAAlB;AAEP,MAAMuB,QAAQ,GAAG,IAAInC,QAAQ,CAACkC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAC;AAAR,CAA7B;AAEA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAenC,QAAf","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config={\r\n        apiKey: \"AIzaSyB7fZRW_XAKbvzSHeWmP0htx1Ej7Vfn6bQ\",\r\n        authDomain: \"crwn-db-9f334.firebaseapp.com\",\r\n        databaseURL: \"https://crwn-db-9f334.firebaseio.com\",\r\n        projectId: \"crwn-db-9f334\",\r\n        storageBucket: \"\",\r\n        messagingSenderId: \"494230776687\",\r\n        appId: \"1:494230776687:web:e599f59b7232e822\"\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\n\r\nexport const firestoreTest = () =>{\r\n    const docRef = firestore.collection('users').doc('1PDJlk2jCVgvHRv2rGoxZX19Mz53')\r\n\r\n      docRef.get().then(function(doc){\r\n            return console.log(doc.data())\r\n      })\r\n\r\n}\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n        if (!userAuth) return;\r\n      \r\n        const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n      \r\n        const snapShot = await userRef.get();\r\n      \r\n        if (!snapShot.exists) {\r\n          const { displayName, email } = userAuth;\r\n          const createdAt = new Date();\r\n          try {\r\n            await userRef.set({\r\n              displayName,\r\n              email,\r\n              createdAt,\r\n              ...additionalData\r\n            });\r\n          } catch (error) {\r\n            console.log('error creating user', error.message);\r\n          }\r\n        }\r\n      \r\n        return userRef;\r\n };\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({prompt:'select_account'});\r\n\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}